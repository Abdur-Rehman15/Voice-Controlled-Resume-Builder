import PDFDocument from 'pdfkit';
import geminiClient from './geminiClient.js';

const pdfGenerator = async (answers) => {
  console.log('[pdfGenerator] Starting PDF generation with answers:', answers);
  
  // Generate professional summary using Gemini AI
  let professionalSummary;
  try {
    console.log('[pdfGenerator] Generating professional summary...');
    professionalSummary = await geminiClient.generateProfessionalSummary(answers);
    console.log('[pdfGenerator] Professional summary generated:', professionalSummary);
  } catch (error) {
    console.error('[pdfGenerator] Error generating professional summary:', error);
    professionalSummary = `${answers[1] || 'Professional'} with experience in ${answers[3] || 'various skills'}. ${answers[4] ? 'Has relevant work experience.' : 'Ready to contribute to organizational success.'}`;
  }

  // Translate all answers to English using Gemini
  const translatedAnswers = [];
  for (let i = 0; i < answers.length; i++) {
    if (answers[i]) {
      try {
        const english = await geminiClient.translateToEnglish(answers[i]);
        translatedAnswers[i] = english;
        console.log('english: ', english, '\n');
      } catch (e) {
        translatedAnswers[i] = answers[i];
      }
    } else {
      translatedAnswers[i] = '';
    }
  }

  return new Promise((resolve) => {
    const doc = new PDFDocument({
      size: 'A4',
      margins: {
        top: 50,
        bottom: 50,
        left: 50,
        right: 50
      }
    });

    const chunks = [];
    doc.on('data', chunk => chunks.push(chunk));
    doc.on('end', () => resolve(Buffer.concat(chunks)));

    // Header
    doc.fontSize(16)
       .font('Helvetica-Bold')
       .text(`${translatedAnswers[0] || 'Name'}`, { align: 'center' })
       doc.moveDown(0.2)
       .font('Helvetica')
       doc.fontSize(12)
       .text(`[${translatedAnswers[1] || 'Profession'}]`, { align: 'center' })
       doc.moveDown(0.2)
       .font('Helvetica')
       .text(`${translatedAnswers[6] || 'Address'}`, { align: 'center' })
       doc.moveDown(0.2)
       .font('Helvetica')
       .text(`${answers[7] || 'Phone'}`, { align: 'center' });
    doc.moveDown(2);

    // Professional Summary
    doc.fontSize(14)
       .font('Helvetica-Bold')
       .text('PROFESSIONAL SUMMARY');
    doc.moveDown(0.5);
    doc.fontSize(11)
       .font('Helvetica')
       .text(professionalSummary);
    doc.moveDown(1);

    // Education
    doc.fontSize(14)
       .font('Helvetica-Bold')
       .text('EDUCATION');
    doc.moveDown(0.5);
    doc.fontSize(11)
       .font('Helvetica')
       .text(translatedAnswers[2] || 'Education');
    doc.moveDown(1);

    // Skills
    doc.fontSize(14)
       .font('Helvetica-Bold')
       .text('SKILLS');
    doc.moveDown(0.5);
    doc.fontSize(11)
       .font('Helvetica')
       .text(translatedAnswers[3] || 'Skills');
    doc.moveDown(1);

    // Experience
    doc.fontSize(14)
       .font('Helvetica-Bold')
       .text('EXPERIENCE');
    doc.moveDown(0.5);
    doc.fontSize(11)
       .font('Helvetica')
       .text(translatedAnswers[4] || 'Experience');
    doc.moveDown(1);

    // Certifications
    doc.fontSize(14)
       .font('Helvetica-Bold')
       .text('CERTIFICATIONS');
    doc.moveDown(0.5);
    doc.fontSize(11)
       .font('Helvetica')
       .text(translatedAnswers[5] || 'No certifications');
    doc.moveDown(1);

    doc.moveDown(2);
    doc.fontSize(10)
       .font('Helvetica-Oblique')
       .text('This resume was generated by AsaanCV', { align: 'center' });

    doc.end();
  });
};

export default pdfGenerator;
